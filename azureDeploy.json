{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.451.19169",
      "templateHash": "4158168616080618986"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Azure region that will be targeted for resources."
      }
    },
    "memberId": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Member id"
      }
    },
    "swarmKeyValue": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Shared swarm key value"
      }
    }
  },
  "functions": [],
  "variables": {
    "aksUserRoleId": "4abbcc35-e782-43d8-92c5-2d3f1bd2253f",
    "storageContribRoleId": "b24988ac-6180-42a0-ab88-20f7382dd24c",
    "persistentDiskName": "[format('{0}dsk', uniqueString(resourceGroup().id))]",
    "fileShareName": "[format('{0}shr', uniqueString(resourceGroup().id))]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
      "apiVersion": "2021-04-01",
      "name": "[format('{0}/{1}/{2}', format('{0}str', uniqueString(resourceGroup().id)), 'default', variables('fileShareName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/fileServices', format('{0}str', uniqueString(resourceGroup().id)), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}str', uniqueString(resourceGroup().id)))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/fileServices",
      "apiVersion": "2021-04-01",
      "name": "[format('{0}/{1}', format('{0}str', uniqueString(resourceGroup().id)), 'default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}str', uniqueString(resourceGroup().id)))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-04-01",
      "name": "[format('{0}str', uniqueString(resourceGroup().id))]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2"
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2018-11-30",
      "name": "[format('{0}mi', uniqueString(resourceGroup().id))]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2021-02-01",
      "name": "[format('{0}{1}', uniqueString(resourceGroup().id), parameters('memberId'))]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[format('10.{0}.0.0/16', parameters('memberId'))]"
          ]
        },
        "subnets": [
          {
            "name": "default",
            "properties": {
              "addressPrefix": "[format('10.{0}.{1}.0/24', parameters('memberId'), parameters('memberId'))]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.ContainerService/managedClusters",
      "apiVersion": "2021-03-01",
      "name": "[format('{0}aks', uniqueString(resourceGroup().id))]",
      "location": "[parameters('location')]",
      "properties": {
        "dnsPrefix": "[format('{0}aks', uniqueString(resourceGroup().id))]",
        "agentPoolProfiles": [
          {
            "name": "agentpool",
            "count": 1,
            "vmSize": "Standard_DS2_v2",
            "mode": "System",
            "vnetSubnetID": "[resourceId('Microsoft.Network/virtualNetworks/subnets/', format('{0}{1}', uniqueString(resourceGroup().id), parameters('memberId')), 'default')]"
          }
        ]
      },
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}mi', uniqueString(resourceGroup().id)))]": {}
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', format('{0}{1}', uniqueString(resourceGroup().id), parameters('memberId')))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}mi', uniqueString(resourceGroup().id)))]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2021-04-01-preview",
      "name": "[guid(uniqueString(resourceGroup().id), 'aks')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('aksUserRoleId'))]",
        "description": "Assign the cluster user-defined managed identity contributor role on the resource group.",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}mi', uniqueString(resourceGroup().id)))).principalId]",
        "scope": "[resourceGroup().id]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerService/managedClusters', format('{0}aks', uniqueString(resourceGroup().id)))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}mi', uniqueString(resourceGroup().id)))]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2021-04-01-preview",
      "name": "[guid(uniqueString(resourceGroup().id), 'storage')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageContribRoleId'))]",
        "description": "Assign the storage user-defined managed identity contributor role on the resource group.",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}mi', uniqueString(resourceGroup().id)))).principalId]",
        "scope": "[resourceGroup().id]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}mi', uniqueString(resourceGroup().id)))]",
        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}str', uniqueString(resourceGroup().id)))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}dpy', uniqueString(resourceGroup().id))]",
      "location": "[parameters('location')]",
      "kind": "AzureCLI",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}mi', uniqueString(resourceGroup().id)))]": {}
        }
      },
      "properties": {
        "arguments": "[format('{0} {1} {2} {3} {4} {5} {6}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}mi', uniqueString(resourceGroup().id))), format('{0}aks', uniqueString(resourceGroup().id)), resourceGroup().name, format('{0}str', uniqueString(resourceGroup().id)), variables('fileShareName'), variables('persistentDiskName'), parameters('swarmKeyValue'))]",
        "forceUpdateTag": "1",
        "containerSettings": {
          "containerGroupName": "[format('{0}ci1', uniqueString(resourceGroup().id))]"
        },
        "primaryScriptUri": "https://raw.githubusercontent.com/caleteeter/ipfs-aks/master/scripts/deploy.sh",
        "timeout": "PT30M",
        "cleanupPreference": "OnSuccess",
        "azCliVersion": "2.9.1",
        "retentionInterval": "P1D"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerService/managedClusters', format('{0}aks', uniqueString(resourceGroup().id)))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}mi', uniqueString(resourceGroup().id)))]",
        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}str', uniqueString(resourceGroup().id)))]"
      ]
    }
  ],
  "outputs": {
    "result": {
      "type": "object",
      "value": "[reference(format('{0}dpy', uniqueString(resourceGroup().id))).outputs]"
    }
  }
}